+-----------------------------------------------------------------------------------------------------+
|                                   THALEX TRADING SYSTEM                                            |
+-----------------------------------------------------------------------------------------------------+
|                                                                                                     |
|  +----------------------+     +----------------------------+     +----------------------------+     |
|  |  AvellanedaQuoter    |<--->| Market Data & Connectivity |<--->|     External Thalex API    |     |
|  | (Main Coordinator)   |     | (WebSocket Management)     |     |    (Market & Execution)    |     |
|  +----------+-----------+     +----------------------------+     +----------------------------+     |
|             |                                                                                       |
|             v                                                                                       |
|  +----------+-----------+                                                                           |
|  |   Configuration      |                                                                           |
|  |   (BOT_CONFIG)       |                                                                           |
|  +----------------------+                                                                           |
|             |                                                                                       |
|             v                                                                                       |
|  +----------+---------------------------------------------------------------+                       |
|  |                        Core Trading Components                           |                       |
|  |  +---------------+   +---------------+   +---------------+               |                       |
|  |  | OrderManager  |   | RiskManager   |   | MarketMaker   |               |                       |
|  |  | (Execution)   |   | (Position &   |   | (Avellaneda-  |               |                       |
|  |  |               |   |  Risk Limits) |   | Stoikov Model)|               |                       |
|  |  +---------------+   +---------------+   +---------------+               |                       |
|  |                                                                          |                       |
|  |  +---------------+   +---------------+                                   |                       |
|  |  | TechnicalAnal.|   | Market Data   |                                   |                       |
|  |  | (Volatility & |   | Processors    |                                   |                       |
|  |  |  Indicators)  |   |               |                                   |                       |
|  |  +---------------+   +---------------+                                   |                       |
|  +------------------------------------------------------------------+-------                       |
|                                                                                                     |
+-----------------------------------------------------------------------------------------------------+


System Logic Flow
Initialization & Connection
AvellanedaQuoter initializes with Thalex client
Loads configuration from BOT_CONFIG
Establishes WebSocket connection
Initializes components (OrderManager, RiskManager, etc.)
Market Data Processing
WebSocket listener receives market data (ticker updates, index prices)
Data is processed and stored in memory (price history, indicators)
Technical analysis component calculates volatility, trends, etc.
Quote Generation (Avellaneda-Stoikov Model)
Market Maker component generates optimal quotes based on:
Current market price
Volatility
Inventory position
Risk parameters
Quotes are validated against risk limits
Order Execution
OrderManager places/cancels orders via Thalex API
Tracks order status and execution
Manages rate limits and cooldown periods
Risk Management
RiskManager monitors position, P&L, and exposure
Enforces risk limits (max position, drawdown, etc.)
Can disable quoting if limits are breached
Feedback Loop
Trade executions update position and P&L
Position affects quote generation (inventory skew)
Market movements trigger quote updates
Key Components Detail
1. AvellanedaQuoter
Central coordinator of the system
Manages three main async tasks:
listen_task: WebSocket connection and message handling
quote_task: Quote generation and placement
heartbeat_task: Connection maintenance
2. Configuration System (Consolidated BOT_CONFIG)
Single source of truth for all parameters
Organized in logical sections:
Market parameters
Order parameters
Quoting parameters
Risk parameters
Technical analysis parameters
Avellaneda model parameters
Connection parameters
Performance monitoring
3. OrderManager
Handles order placement, cancellation, and tracking
Maintains state of active orders
Implements rate limiting and retry logic
Aligns prices and sizes to exchange requirements
4. Market Maker (Avellaneda-Stoikov Model)
Implements mathematical model for optimal market making
Adjusts quotes based on:
Risk aversion (gamma)
Inventory position
Market volatility
Order flow intensity
5. RiskManager
Monitors position size and exposure
Tracks P&L metrics
Implements risk controls:
Position limits
Drawdown limits
Loss limits
Trailing stops
6. TechnicalAnalysis
Calculates market volatility
Identifies trends and mean reversion
Provides signals for quote adjustment
Data Flow Cycle
Market data arrives via WebSocket
Data is processed and analyzed
Market conditions are assessed
Quote parameters are calculated
Orders are placed or updated
Executions update position and P&L
Position affects future quotes
Cycle repeats
Critical Subsystems
1. Rate Limiting & Cooldown
Tracks request rates
Implements progressive backoff during high usage
Prevents API bans and ensures system stability
Heartbeat & Connection Management
Monitors connection health
Reconnects after disconnections
Implements exponential backoff
3. Error Handling & Recovery
Handles API errors
Implements retry logic
Gracefully degrades during adverse conditions